// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Issue {
  id               Int         @id @default(autoincrement())
  title            String      @db.VarChar(255)
  description      String      @db.Text
  status           IssueStatus @default(OPEN)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  assignedToUserId String?     @db.VarChar(255)
  assignedToUser   User?       @relation(name: "IssueToUser", fields: [assignedToUserId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(name: "AccountToUser", fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(name: "SessionToUser", fields: [userId], references: [id])
}

model User {
  id             String           @id @default(cuid())
  firstname      String?
  surname        String?
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]        @relation(name: "AccountToUser")
  sessions       Session[]        @relation(name: "SessionToUser")
  assignedIssues Issue[]          @relation(name: "IssueToUser")
  removeInstance RemoveInstance[] @relation(name: "UserToRemoveInstance")
  instancesAdded Instance[]       @relation(name: "UserToInstance")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id              Int           @id @default(autoincrement())
  title           String        @db.VarChar(255)
  type            ItemTypes?
  category        ItemCategory?
  grouping        ItemGrouping?
  requiredCount   Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  information     String?       @db.Text
  instructionsURL String?
  bnfURL          String?
  emcPilURL       String?
  instances       Instance[]    @relation(name: "InstanceToItem")
  holdingitem     HoldingItem[] @relation(name: "ItemToHoldingItem")
}

model Holding {
  id              Int              @id @default(autoincrement())
  title           String           @db.VarChar(255)
  field           String?          @db.VarChar(255)
  isMainHolding   Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  type            HoldingType      @default(GENERAL)
  locations       Location[]       @relation(name: "HoldingToLocation")
  holdingitem     HoldingItem[]    @relation(name: "HoldingToHoldingItem")
  removedInstance RemoveInstance[] @relation(name: "HoldingToRemoveInstance")
}

model Location {
  id              Int              @id @default(autoincrement())
  title           String           @db.VarChar(255)
  field           String?          @db.VarChar(255)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  holdingId       Int
  holding         Holding          @relation(name: "HoldingToLocation", fields: [holdingId], references: [id])
  instances       Instance[]       @relation(name: "InstanceToLocation")
  removedInstance RemoveInstance[] @relation(name: "LocationToRemoveInstance")
}

model Instance {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  expiryDate      DateTime?
  quantity        Int              @default(0)
  batch           String?          @db.VarChar(255)
  itemId          Int
  item            Item             @relation(name: "InstanceToItem", fields: [itemId], references: [id])
  locationId      Int
  location        Location         @relation(name: "InstanceToLocation", fields: [locationId], references: [id])
  removedInstance RemoveInstance[] @relation(name: "InstanceToRemoveInstance")
  addedBy         User?            @relation(name: "UserToInstance", fields: [addedById], references: [id])
  addedById       String?
}

model HoldingItem {
  id               Int     @id @default(autoincrement())
  requiredMinCount Int
  item             Item    @relation(name: "ItemToHoldingItem", fields: [itemId], references: [id])
  holding          Holding @relation(name: "HoldingToHoldingItem", fields: [holdingId], references: [id])
  itemId           Int
  holdingId        Int
}

model RemoveInstance {
  id          Int                  @id @default(autoincrement())
  prf         String?
  instance    Instance             @relation(name: "InstanceToRemoveInstance", fields: [instanceId], references: [id])
  instanceId  Int                  
  holding     Holding              @relation(name: "HoldingToRemoveInstance", fields: [holdingId], references: [id])
  holdingId   Int                  
  location    Location?            @relation(name: "LocationToRemoveInstance", fields: [locationId], references: [id])
  locationId  Int?                	
  createdAt   DateTime?            @default(now())
  updatedAt   DateTime?            @updatedAt
  quantity    Int
  removedAt   DateTime             @default(now())
  reason      RemoveInstanceReason
  otherReason String?              @db.VarChar(255)
  removedBy   User                 @relation(name: "UserToRemoveInstance", fields: [removedById], references: [id])
  removedById String               
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSE
}

enum ItemTypes {
  NONE
  UNKNOWN
  TABLET
  INJECTION
  SPRAY
  LIQUID
  SUPPOSITORY
  CAPSULE
  AMPOULE
  CREAM
  GEL
  TOPICAL
  BUCCAL
  PREFILLED_SYRINGE
  SYRINGE
  DRESSING
  DROPS
  PESSARY
  INHALER
}

enum ItemCategory {
  NONE
  UNKNOWN
  DRUG
  DRESSING
  DISPOSABLE
  BEDDING
  SPLINT
  STRETCHER
  HARDWARE
}

enum ItemGrouping {
  NONE
  UNKNOWN
  CARDIOVASCULAR
  GASTROINTESTINAL
  ANALGESICS_ANTISPASMODICS
  NERVOUS
  ALLERGY_ANAPHYLAXSIS
  RESPIRATORY
  ANTIINFECTION
  REHYDRATION
  EXTERNAL
  RESUSCITATION
  DRESSING
  INSTRUMENTS
  MONITORING
  INJECTION_CATHETERIZATION
  GENERAL
  IMMOBILIZATION
  ADDITIONAL
}

enum HoldingType {
  EVENT
  FLEET
  FACILITY
  STORE
  GENERAL
}

enum RemoveInstanceReason {
  USED
  DAMAGED
  LOST
  STOLEN
  EXPIRED
  RECALLED
  REMOVED
  OTHER
}
